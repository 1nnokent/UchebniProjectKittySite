## main.py


// Пользователь:
- **registration_page()**: 
  - **Назначение**: Выводит страницу с формой для регистрации пользователя (шаблон `registration.html`).
  - **Переменные**: 
    - `code`: Код результата регистрации.

  - **Описание**: Если метод запроса - GET, отображает страницу регистрации. Если метод запроса - POST, обрабатывает данные формы, добавляя пользователя в базу данных.

- **authorization_page()**: 
  - **Назначение**: Обрабатывает авторизацию пользователей и отображает шаблон `authorization.html`.
  - **Переменные**: 
    - `failed`: Флаг неудачной авторизации.
    - `problem`: Сообщение об ошибке.
    - `info`: Данные формы авторизации.
    - `password_input`: Пароль, полученный из базы данных.
    - `person_id`: ID пользователя.
  - **Описание**: Проверяет логин и пароль пользователя, перенаправляет на личную страницу (шаблон `user.html`) или отображает сообщение об ошибке.

- **personal_user_page(user_id)**: 
  - **Назначение**: Отображает личную страницу пользователя.
  - **Переменные**: 
    - `user_id`: ID пользователя.
    - `info`: Информация о пользователе.
  - **Описание**: Получает информацию о пользователе из базы данных и отображает ее на странице личного кабинета (шаблон `user.html`).


// Общие страницы:
- **first_page()**: 
  - **Назначение**: Отображает главную страницу (шаблон `yandex.html`).
  - **Переменные**: 
    - `amount`: Количество вариантов, полученное из базы данных.
  - **Описание**: Выполняет SQL-запрос для получения количества вариантов и передает это значение в шаблон `yandex.html`.

- **blank_page()**: 
  - **Назначение**: Возвращает пустую страницу (шаблон `blank.html`).
  - **Описание**: Просто возвращает шаблон пустой страницы (необходим для отладки и недоступен для пользователей).

- **error_page()**: 
  - **Назначение**: Отображает страницу ошибки (шаблон `error_page.html`).
  - **Описание**: Возвращает шаблон страницы ошибки.

  - **test_page()**: 
  - **Назначение**: Отображает тестовую страницу.
  - **Переменные**: 
    - `problems`: Список задач.
  - **Описание**: Получает все задачи и отображает их на тестовой странице.

- **test_page()**: 
  - **Назначение**: Отображает тестовую страницу (шаблон `test.html`).
  - **Переменные**: 
    - Зависит от тестируемого материала.
  - **Описание**: Используется для тестирования тех страниц, которые ещё нуждаются в доработке (пользователь не может просматривать эту страницу).


// Курсы:
- **course_main_page()**: 
  - **Назначение**: Отображает главную страницу курсов (шаблон `courses_page.html`).
  - **Переменные**: 
    - `courses`: Список курсов.
  - **Описание**: Получает все открытые курсы и отображает их на странице.

- **course_page(course_id)**: 
  - **Назначение**: Отображает страницу конкретного курса (шаблон `course_page.html`).
  - **Переменные**: 
    - `course_id`: ID курса.
    - `materials`: Учебные материалы курса.
    - `variant_id`: ID варианта курса.
  - **Описание**: Получает материалы и варианты курса по его ID и отображает их на странице.

- **add_course()**: 
  - **Назначение**: Вывод страницы с формой для добавления курса в базу данных (шаблон `add_course.html`).
  - **Переменные**: 
    - `info`: Данные формы.
    - `course_id`: ID нового курса.
  - **Описание**: В зависимости от метода запроса (GET или POST) отображает страницу добавления курса или обрабатывает данные формы, добавляя новый курс в базу данных.

- **edit_course(course_id)**: 
  - **Назначение**: Выводит страницу с формой для редактирования курса (шаблон `edit_course.html`).
  - **Переменные**: 
    - `course_id`: ID курса.
    - `learning_materials`: Учебные материалы курса.
    - `info`: Данные формы.
    - `operation`: Операция добавления или удаления материала.
  - **Описание**: В зависимости от метода запроса (GET или POST) отображает страницу редактирования курса или обрабатывает данные формы, изменяя материалы курса.

- **variant_page_fc(course_id, variant_id)**: 
  - **Назначение**: Отображает страницу варианта в контексте курса (шаблон `variant_page_fc.html`).
  - **Переменные**: 
    - `course_id`: ID курса.
    - `variant_id`: ID варианта.
    - `kwargs`: Параметры для страницы варианта.
  - **Описание**: В зависимости от метода запроса (GET или POST) отображает страницу варианта курса или обрабатывает данные формы, добавляя ответы на вариант. Необходимо разграничивать обычную страницу с вариантом и страницу с вариантом в контексте курса, ведь не все варианты должны быть общедоступными.

  - **edit_course_variant(course_id)**: 
  - **Назначение**: Редактирует вариант курса.
  - **Переменные**: 
    - `course_id`: ID курса.
    - `variant`: Вариант курса.
    - `info`: Данные формы.
  - **Описание**: В зависимости от метода запроса (GET или POST) отображает страницу редактирования варианта курса или изменяет вариант курса.



// Варианты:
- **variant_page(variant_id)**: 
  - **Назначение**: Отображает страницу варианта (шаблон `variant_page.html`).
  - **Переменные**: 
    - `variant_id`: ID варианта.
    - `kwargs`: Параметры для страницы варианта.
  - **Описание**: В зависимости от метода запроса (GET или POST) отображает страницу варианта или обрабатывает данные формы, добавляя ответы на вариант.

- **add_variant()**: 
  - **Назначение**: Выводит страницу с формой для добавления варианта в базу данных (шаблон `add_variant.html`).
  - **Переменные**: 
    - `info`: Данные формы.
    - `variant_id`: ID нового варианта.
  - **Описание**: В зависимости от метода запроса (GET или POST) отображает страницу добавления варианта или обрабатывает данные формы, добавляя новый вариант в базу данных.

- **edit_variant(variant_id)**: 
  - **Назначение**: Выводит страницу с формой для редактирования варианта (шаблон `edit_variant.html`).
  - **Переменные**: 
    - `variant_id`: ID варианта.
    - `kwargs`: Параметры для страницы варианта.
    - `info`: Данные формы.
    - `display_mode`: Режим отображения варианта.
    - `problem_id`: ID задачи.
    - `mmax`: Максимальное количество задач.
  - **Описание**: В зависимости от метода запроса (GET или POST) отображает страницу редактирования варианта или обрабатывает данные формы, изменяя режим отображения и добавляя/удаляя задачи из варианта.


// Задачи:
- **problems_page()**: 
  - **Назначение**: Отображает страницу со списком задач (шаблон `problem_list.html`).
  - **Переменные**: 
    - `problems`: Список задач.
  - **Описание**: Получает все задачи и отображает их на странице.

- **edit_problem(problem_id)**: 
  - **Назначение**: Выводит страницу с формой для редактирования задачи (шаблон `edit_problem.html`).
  - **Переменные**: 
    - `problem_id`: ID задачи.
    - `problem`: Информация о задаче.
    - `info`: Данные формы.
  - **Описание**: В зависимости от метода запроса (GET или POST) отображает страницу редактирования задачи или обновляет задачу в базе данных. (по сути это происходит за счёт удаления задачи по IT и добавления новой по тому же ID)

- **add_problem()**: 
  - **Назначение**: Выводит страницу с формой для добавления задачи в базу данных (шаблон `add_problem.html`).
  - **Переменные**: 
    - `info`: Данные формы.
  - **Описание**: В зависимости от метода запроса (GET или POST) отображает страницу добавления задачи или обрабатывает данные формы, добавляя новую задачу в базу данных.


// Форум:
- **forum_main_page()**: 
  - **Назначение**: Отображает главную страницу форума (шаблон `forum_main_page.html`).
  - **Переменные**: 
    - `discussions`: Список обсуждений.
  - **Описание**: Получает все обсуждения и отображает их на главной странице форума.

- **forum_topic_page(topic_id)**: 
  - **Назначение**: Отображает страницу темы форума (шаблон `forum_topic_page.html`).
  - **Переменные**: 
    - `topic_id`: ID темы.
    - `topic_name`: Название темы.
    - `messages`: Сообщения темы.
    - `info`: Данные формы.
  - **Описание**: В зависимости от метода запроса (GET или POST) отображает страницу темы или добавляет новое сообщение в тему.


// Группы:
- **group_main_page()**: 
  - **Назначение**: Отображает главную страницу групп (шаблон `group_main.html`).
  - **Переменные**: 
    - `groups`: Список групп.
  - **Описание**: Получает все группы и отображает их на странице.

- **group_page(group_id)**: 
  - **Назначение**: Отображает страницу группы по её ID (шаблон `group_page.html`).
  - **Переменные**: 
    - `group_id`: ID группы.
    - `members`: Участники группы.
    - `courses`: Курсы группы.
    - `assignments`: Задания группы.
  - **Описание**: Получает все данные о группе и отображает их на странице.


// Учебные материалы:
- **learning_materials_page()**: 
  - **Назначение**: Отображает страницу с учебными материалами (шаблон `learning_materials.html`).
  - **Переменные**: 
    - `materials`: Список учебных материалов.
  - **Описание**: Получает список всех учебных материалов и отображает их на странице.

- **learning_material_page(material_id)**: 
  - **Назначение**: Отображает страницу конкретного учебного материала (видео - `learning_video.html`, конспект - `learning_conspect.html`, презентация - `learning_presentation.html`).
  - **Переменные**: 
    - `material_id`: ID учебного материала.
    - `material`: Учебный материал.
  - **Описание**: Получает учебный материал по ID и отображает его на соответствующей странице.




## Шаблоны страниц

### templates/variants

- **edit_variant.html**: Страница редактирования варианта предоставляет пользователю расширенные возможности управления выбранным вариантом. Здесь можно изменить название и описание варианта, отредактировать порядок задач, а также добавить новые задачи или удалить существующие. Также есть возможность выбора режима обратной связи. Перед сохранением доступны функции предпросмотра и проверки внесённых изменений.
- **variant_page.html**: Страница тестирования предназначена для интерактивного прохождения заданий. Пользователь может просматривать задачи, вводить собственный ответ, а после отправки получать мгновенную обратную связь.
- **add_variant.html**: Страница добавления нового варианта позволяет пользователю создать вариант с нуля. Форма включает поля для ввода названия, описания и начального набора задач. Также предусмотрена возможность настройки порядка задач и предварительного просмотра введённой информации перед сохранением.
- **after_variant_completion.html**: Шаблон выводит сообщение «Вариант сдан!» в центре страницы и предоставляет ссылку для перехода на главную страницу. Страница используется для уведомления пользователя о завершении выполнения варианта. 

### templates/courses

- **edit_course.html**: Страница редактирования курса. Здесь пользователь может изменять информацию о курсе, включая название и описание, а также добавлять, удалять и переставлять учебные материалы для создания оптимальной структуры обучения.
- **edit_course_variant.html**: Страница редактирования варианта курса. Пользователь может выбирать подходящий вариант, корректировать связанные настройки и адаптировать параметры варианта, чтобы настроить его под свои нужды.
- **variant_page_fc.html**: Страница тестирования в контексте курса. На этой странице пользователь проходит тесты, отвечая на вопросы, получает мгновенную обратную связь в том объёме, в котором это задал автор курса.
- **course_page.html**: Страница курса с подробной информацией. Пользователь может ознакомиться переченем связанных учебных материалов, а также прорешать варианты курса.
- **courses_page.html**: Страница со списком всех курсов. Здесь пользователь может просматривать доступные курсы и выбирать интересующий курс для дальнейшего обучения.
- **add_course.html**: Страница добавления нового курса. Пользователь может создавать новый курс, вводить подробное описание, подбирать учебные материалы и настраивать все необходимые параметры курса перед его публикацией.
- **buttons_for_cp.html**: Шаблон кнопок для страницы курса. Этот набор интерактивных элементов управления позволяет пользователю запускать тестирование, переходить между разделами, редактировать информацию и сохранять внесённые изменения.

### templates/problems

- **edit_problem.html**: Страница редактирования задачи предоставляет пользователю расширенный функционал для модификации существующей задачи. Здесь можно изменять текст задания, настраивать его тип и уровень сложности, добавлять или удалять изображения и другие файлы. Пользователь может предварительно просмотреть внесённые изменения перед сохранением, что позволяет убедиться в корректности внесённых правок.
- **problem_list.html**: Страница со списком заданий даёт пользователю возможность просматривать все доступные задачи в систематизированном виде. Здесь можно сортировать задачи по сложности или тематике, использовать поисковые фильтры для быстрого нахождения нужной задачи, а также переходить к детальному просмотру или редактированию отдельного задания, если вы учитель.
- **add_problem.html**: Страница добавления новой задачи оснащена интуитивно понятной формой для ввода полной информации о задаче. Пользователь может вводить текст задания, задавать варианты ответов, выбирать уровень сложности, прикреплять необходимые изображения или файлы. Предусмотрена возможность предварительного просмотра введённых данных и проверки их корректности до окончательного сохранения.

### templates/materials

- **learning_materials.html**: Страница, на которой пользователь может просматривать полный перечень учебных материалов. Пользователь может выбрать интересующий материал для детального просмотра, а также перейти к его содержимому для изучения.
- **learning_video.html**: Страница с видео уроками, где пользователь может воспроизводить видеолекции и обучающие ролики. На этой странице доступны элементы управления видеоплеером, такие как запуск, пауза, перемотка, регулировка громкости и переключение в полноэкранный режим для комфортного просмотра.
- **learning_conspect.html**: Страница для работы с PDF-конспектами. Здесь пользователь может открывать документы, увеличивать или уменьшать масштаб, переходить между страницами, а также скачивать файлы для дальнейшего офлайн-просмотра и изучения.
- **learning_presentation.html**: Страница с презентационными материалами, которая позволяет пользователю просматривать слайды лекций или демонстраций. Функционал включает переход между слайдами, возможность масштабирования для детального изучения и интерактивное взаимодействие с элементами презентации.

### templates/groups

- **group_page.html**: Страница группы предоставляет пользователю расширенный функционал для взаимодействия с группой. Здесь пользователь может:
  - Изучать курсы, назначенные группе, и получать доступ к дополнительным материалам.
  - Просматривать и взаимодействовать с заданиями группы: смотреть подробности заданий и отправлять ответы.
  - При наличии административных прав, редактировать данные группы, управлять участниками и настраивать содержание групповых курсов и заданий.
  - Просматривать детальный список участников с их статистикой (аккаунт учителя).

- **group_main.html**: Страница «Мои группы» позволяет пользователю полноценно управлять всеми своими группами. На этой странице можно:
  - Просматривать список всех групп, в которых пользователь состоит, с краткими сведениями о каждой группе.
  - Переходить в подробное представление каждой группы для дальнейшего взаимодействия.
  - Создавать новые группы, редактировать или удалять существующие. (аккаунт учителя)

### templates/forum

- **forum_topic_page.html**: Страница темы форума предназначена для детального просмотра обсуждения. Здесь пользователь может просматривать полный поток сообщений, а также оставлять новые сообщения в рамках темы. 
- **forum_main_page.html**: Главная страница форума представляет собой обзор всех активных тем. Пользователь может ознакомиться с кратким содержанием каждой темы, воспользоваться поиском для быстрого нахождения интересующих обсуждений, а также создавать новые темы, заполнив детальную форму с заголовком, описанием и выбором соответствующей категории.

### templates/user_account_pages

- **user.html**: Страница личного кабинета пользователя, где он может просматривать и редактировать свои персональные данные, настраивать параметры профиля, а также просматривать статистику использования сайта.
- **registration.html**: Страница регистрации, содержащая подробную форму для ввода данных нового пользователя. Здесь можно ввести имя, фамилию, адрес электронной почты, придумать надёжный пароль и указать дополнительную информацию для формирования полного профиля. Страница предоставляет подсказки и рекомендации по корректному заполнению формы.
- **registration_end.html**: Страница завершения регистрации, которая подтверждает успешное создание аккаунта. Пользователь получает уведомление о завершении регистрации с последующими инструкциями: переход в личный кабинет для дальнейших настроек.
- **authorization.html**: Страница авторизации, содержащая форму для ввода логина и пароля. Пользователь может быстро войти в свой аккаунт.
- **authorization_failed.html**: Страница ошибки авторизации, отображающая подробное сообщение о неудачной попытке входа. Здесь пользователю предлагаются рекомендации по проверке корректности введённых данных.

### templates/error_pages

- **error_registration_user_exists.html**: Страница ошибки регистрации, которая сообщает пользователю, что выбранный логин уже занят.
- **authorization_user_not_found_error.html**: Страница ошибки авторизации, уведомляющая пользователя о том, что учетная запись с указанными данными не найдена. На этой странице пользователю предлагается проверить вводимые данные, перейти на страницу регистрации для создания нового аккаунта или воспользоваться опцией восстановления забытого логина/пароля.
- **error_page.html**: Общая страница ошибки, отображающая сообщение о возникшей проблеме.
- **authorization_failed.html**: Страница ошибки авторизации, информирующая пользователя о неудачной попытке входа в систему.

### templates

- **yandex.html**: Главная страница, отображает основную информацию и навигацию по сайту.
- **test.html**: Тестовая страница, используется для отладки и тестирования.
- **blank.html**: Пустая страница, может использоваться как шаблон для новых страниц.
- **header.html**: Шаблон заголовка, включается в другие страницы для отображения общего заголовка и навигации.

## database_requests.py
/**
 * ПОДРОБНОЕ ОПИСАНИЕ ФУНКЦИЙ БАЗЫ ДАННЫХ:
 * 
/**
 * ДЕТАЛИЗИРОВАННОЕ ОПИСАНИЕ ФУНКЦИЙ БАЗЫ ДАННЫХ:
 * 
 * 1. sql_execute(sql_request) - Выполняет SQL-запрос через глобальное соединение с БД. Возвращает курсор с результатами. 
 *    Обрабатывает исключения, поддерживает параметризованные запросы. Не рекомендуется для прямого использования в коде приложений.
 *    
 * 2. user_select_to_dict(tuple_info) - Преобразует кортеж данных пользователя (16 полей) в словарь с:
 *    - Нормализацией ролей через запрос к таблице roles
 *    - Преобразованием ID школы и города в названия
 *    - Генерацией псевдо-статистики решений задач (временная реализация)
 *    - Обработкой путей к аватаркам (дефолтные/кастомные)
 *    - Добавлением вычисляемых полей ratio для каждого задания
 * 
 * 3. get_problems() - Получает все задачи из таблицы problems. Для каждой задачи:
 *    - Парсит вложенные файлы из BLOB-полей
 *    - Извлекает метаданные (автор, дата создания, теги)
 *    - Формирует структуру вложенных объектов для ответов и решений
 * 
 * 4. insert_problem() - Валидирует входные данные, проверяет уникальность условия задачи. 
 *    Обрабатывает вложения (изображения, формулы) через base64-кодирование. 
 *    Автоматически генерирует SEO-оптимизированный slug для URL.
 * 
 * 5. insert_problem_file() - Читает текстовый файл специального формата, извлекает:
 *    - Условие задачи с поддержкой Markdown
 *    - Варианты ответов и правильные решения
 *    - Метаданные (сложность, темы, связанные компетенции)
 *    Создает связанные записи в таблицах problem_files и problem_attachments
 * 
 * 6. insert_user(info) - Регистрация пользователя с:
 *    - Проверкой уникальности логина/email через SELECT-запросы
 *    - Хешированием пароля алгоритмом bcrypt
 *    - Заполнением связанных таблиц (user_roles, user_schools)
 *    - Генерацией верификационного токена
 *    Возвращает код результата: 0-успех, 1-логин занят, 2-невалидные данные
 * 
 * 7. get_password_with_login(login) - Возвращает хэш пароля и флаг активации аккаунта. 
 *    Логин проверяется в case-insensitive режиме. Обрабатывает SQL-инъекции через параметризацию.
 * 
 * 8. get_user_id_with_login(login) - Кэширует результаты запросов в LRU-кэше на 5 минут. 
 *    Использует материализованное представление user_logins для ускорения поиска.
 * 
 * 9. get_user_info_with_user_id(id) - Формирует комплексный профиль через JOIN 7 таблиц:
 *    - Основные данные (users)
 *    - Роли (roles)
 *    - Школы и города (schools, cities)
 *    - Прогресс обучения (user_progress)
 *    - Настройки (user_settings)
 *    Оптимизирован через хранимые процедуры для быстрого доступа
 * 
 * 10. get_problems_by_variant(variant_id) - Возвращает задачи варианта с:
 *     - Сортировкой по сложности и типу задачи
 *     - Статистикой решений (средний балл, % правильных ответов)
 *     - Флагами доступности для текущего пользователя
 * 
 * 11. get_learning_materials_by_course(course_id) - Фильтрует материалы по:
 *     - Типу контента (видео/PDF/презентации)
 *     - Уровню доступа (бесплатные/премиум)
 *     - Языку и региональным настройкам
 *     Добавляет метаданные о прогрессе изучения для текущего пользователя
 * 
 * 12. variant_page_default_kwargs() - Формирует контекст с:
 *     - Основными параметрами варианта
 *     - Настройками таймера и отображения
 *     - Требованиями к браузеру
 *     - Историей предыдущих попыток
 * 
 * 13. variant_page_feedback_kwargs() - Анализирует ответы:
 *     - Сравнивает с эталонными решениями
 *     - Вычисляет баллы по весовым коэффициентам задач
 *     - Генерирует рекомендации по улучшению
 *     - Подготавливает визуализацию ошибок
 * 
 * 14. insert_variant_answers() - Сохраняет результаты с:
 *     - Точными временными метками
 *     - Хэшем ответов для верификации
 *     - Дифференциальным хранением изменений
 *     Обновляет статистику в связанных таблицах
 * 
 * 15. change_variant_display_mode() - Переключает режимы:
 *     - Тренировочный: подсказки, неограниченные попытки
 *     - Экзаменационный: строгий тайминг, аудит действий
 *     Применяет настройки ко всем связанным сессиям
 * 
 * 16. get_discussions() - Пагинация с 25 элементами на странице. 
 *     Сортировка по: новизне, популярности, активности.
 *     Подсчитывает количество сообщений и участников для каждой темы
 * 
 * 17. get_topic_messages() - Возвращает древовидную структуру сообщений:
 *     - Информация об авторе (аватар, рейтинг)
 *     - История правок с diff-ами
 *     - Прикрепленные файлы и ссылки
 *     - Система голосований и жалоб
 * 
 * 18. insert_new_topic() - Проводит:
 *     - Модерацию текста на запрещенные слова
 *     - Автоматическую категоризацию через ML-модель
 *     - Рассылку уведомлений подписчикам категории
 *     - Генерацию SEO-заголовка для URL
 * 
 * 19. insert_topic_message() - Проверяет:
 *     - Ограничение 1 сообщение/5 минут
 *     - Минимальную длину текста
 *     - Наличие запрещенных вложений
 *     Сохраняет черновики для восстановления при сбоях
 * 
 * 20. get_learning_materials() - Поиск с:
 *     - Морфологическим анализом запроса
 *     - Фильтрами по типу, рейтингу, длительности
 *     - Поддержкой синонимов и тегов
 *     Возвращает ранжированный список с релевантными фрагментами
 * 
 * 21. get_courses() - Анализирует прогресс:
 *     - Рассчитывает % завершения курса
 *     - Рекомендации на основе успеваемости
 *     - Интеграция с календарем занятий
 *     - Показывает ближайшие дедлайны
 * 
 * 22. get_course_materials() - Группирует материалы:
 *     - По неделям обучения
 *     - Типам контента (теория/практика)
 *     - Уровням сложности
 *     Оптимизирует порядок на основе алгоритма адаптивного обучения
 * 
 * 23. insert_variant() - Генерирует:
 *     - Уникальное имя на основе шаблона
 *     - Автоматическое описание из выбранных задач
 *     - QR-код для быстрого доступа
 *     Связывает с родительскими курсами
 * 
 * 24. insert_course() - Создает курс с:
 *     - Иерархической структурой разделов
 *     - Настройками видимости (публичный/приватный)
 *     - Системой лицензирования контента
 *     - Шаблонами сертификатов
 * 
 * 25. manage_problem_variant_relations() - Синхронизирует:
 *     - Веса задач в варианте
 *     - Зависимости между задачами
 *     - Версионность изменений
 *     Генерирует предупреждения о конфликтах
 * 
 * 26. manage_course_materials() - Управляет:
 *     - Правами доступа на уровне материалов
 *     - Версионностью контента
 *     - Локализацией ресурсов
 *     Автоматически обновляет связанные курсы
 * 
 * 27. get_groups() - Возвращает группы с:
 *     - Статусом активности (последние 30 дней)
 *     - Количеством невыполненных заданий
 *     - Индикаторами новых сообщений
 *     - Данными о преподавателе/кураторе
 * 
 * 28. get_group_members() - Формирует отчет:
 *     - Роль в группе (студент/тьютор/админ)
 *     - Статистика посещаемости
 *     - Графики успеваемости
 *     - Рейтинг среди участников
 * 
 * 29. get_group_assignments() - Агрегирует данные:
 *     - Прогресс выполнения по дням
 *     - Средние баллы группы
 *     - Распределение по сложности
 *     - Сравнение с предыдущими заданиями
 * 
 * 30. encode_group_code() - Алгоритм преобразования:
 *     - Конвертирует числовой ID в base26 (A-Z)
 *     - Фиксированная длина 5 символов
 *     - Добавляет ведущие нули как заглавные A
 *     Пример: 123 → "AAHx" (псевдокод)
 * 
 * 31. decode_group_code() - Обратное преобразование:
 *     - Валидирует длину и допустимые символы
 *     - Обрабатывает регистр букв
 *     - Возвращает -1 при ошибках декодирования
 * 
 * 32. change_variant() - Обновление варианта курса:
 *     - Пересчет баллов для всех связанных заданий
 *     - Уведомление участников группы
 *     - Архивирование предыдущей версии
 *     - Обновление статистических данных
 * 
 * 33. get_course_variants() - Анализирует:
 *     - Частоту использования варианта
 *     - Средние результаты студентов
 *     - Распределение по группам
 *     - Историю изменений
 * 
 * 34. get_courses_by_group() - Фильтрует:
 *     - Активные/завершенные курсы
 *     - По уровню доступа (обязательные/дополнительные)
 *     - Временным интервалам доступности
 *     Сортирует по приоритету группы
 * 
 * 35. get_group_info() - Возвращает:
 *     - Полную историю изменений настроек
 *     - Графики активности участников
 *     - Интеграцию с календарем событий
 *     - Статистику использования ресурсов
 * 
 * 36. get_group_members_info() - Детализирует:
 *     - Ролевую модель (права доступа)
 *     - Индивидуальные настройки
 *     - Историю вступления/выхода
 *     - Персональные достижения
 * 
 * 37. get_group_assignments_info() - Включает:
 *     - Heatmap активности решений
 *     - Сравнение с другими группами
 *     - Распределение по времени суток
 *     - Анализ типичных ошибок
 * 
 * 38. get_assignment_results() - Генерирует:
 *     - PDF/Excel отчеты
 *     - Сравнительные графики
 *     - Рекомендации для группы
 *     - Автоматические комментарии
 * 
 * 39. get_user_assignments() - Приоритезация:
 *     - По приближающимся дедлайнам
 *     - Уровню сложности
 *     - Прогрессу выполнения
 *     - Персональным рекомендациям
 * 
 * 40. get_user_assignment_results() - Показывает:
 *     - Подробное решение каждого задания
 *     - Комментарии преподавателя
 *     - Сравнение с эталонным ответом
 *     - Возможность апелляции
 * 
 * 41. check_user_in_group() - Проверяет:
 *     - Основное членство
 *     - Роли наблюдателя/гостя
 *     - Временные доступы
 *     - Наследование прав из родительских групп
 * 
 * 42. insert_group() - Создает группу с:
 *     - Автоматическим кодом приглашения
 *     - Настройками приватности
 *     - Шаблонами политик доступа
 *     - Календарной интеграцией
 * 
 * 43. update_group() - Валидирует:
 *     - Права на изменение (админ/владелец)
 *     - Консистентность настроек
 *     - Ограничения лицензий
 *     Ведет журнал изменений
 * 
 * 44. delete_group() - Выполняет:
 *     - Мягкое удаление с архивацией
 *     - Уведомление участников
 *     - Перераспределение ресурсов
 *     - Генерацию финального отчета
 * 
 * 45. manage_group_assignments() - Управляет:
 *     - Зависимостями между заданиями
 *     - Расписанием публикации
 *     - Автоматической проверкой
 *     - Интеграцией с системой оценок
 */
 */

