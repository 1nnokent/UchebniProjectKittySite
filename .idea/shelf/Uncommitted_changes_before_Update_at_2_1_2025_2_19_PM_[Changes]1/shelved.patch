Index: database_requests.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import random\r\n\r\nfrom flask import Flask, render_template, request\r\nimport sqlite3 as sq\r\nfrom config import database\r\nfrom datetime import datetime\r\n\r\nconnect = sq.connect(database, check_same_thread=False)\r\ncursor = connect.cursor()\r\n\r\ndef sql_execute(sql_request):\r\n    ret = cursor.execute(sql_request)\r\n    return ret\r\n\r\ndef user_select_to_dict(tuple_info):\r\n    dict = {}\r\n    dict['user_id'] = tuple_info[0][0]\r\n    dict['role_id'] = tuple_info[0][1]\r\n    dict['registration_time'] = tuple_info[0][2]\r\n    dict['first_name'] = tuple_info[0][3]\r\n    dict['second_name'] = tuple_info[0][4]\r\n    dict['third_name'] = tuple_info[0][5]\r\n    dict['login'] = tuple_info[0][6]\r\n    dict['password'] = tuple_info[0][7]\r\n    dict['email'] = tuple_info[0][8]\r\n    dict['birth_date'] = tuple_info[0][9]\r\n    dict['school_id'] = tuple_info[0][10]\r\n    dict['city_id'] = tuple_info[0][11]\r\n    dict['class'] = tuple_info[0][12]\r\n    dict['number_of_attempts'] = {}\r\n    dict['number_of_right_attempts'] = {}\r\n    dict['ratio'] = {}\r\n    for task in range(1, 28):\r\n        dict['number_of_attempts'][task] = random.randint(1, 25)\r\n        dict['number_of_right_attempts'][task] = random.randint(1, dict['number_of_attempts'][task])\r\n        dict['ratio'][task] = dict['number_of_right_attempts'][task] / dict['number_of_attempts'][task]\r\n    if tuple_info[0][13] != -1:\r\n        dict['photo_directory'] = '/img/profile-pictures/profile_' + str(tuple_info[0][13]) + '_avatar.jpg'\r\n    else:\r\n        dict['photo_directory'] = '/img/profile-pictures/profile_default_avatar.jpg'\r\n\r\n    return dict\r\n\r\ndef insert_problem(problem_type, problem_class, problem_source, problem_statement, problem_answer, problem_difficulty):\r\n    amount = sql_execute(\"SELECT COUNT (*) FROM problems\").fetchall()[0][0]\r\n    text = \"\"\r\n    prev = 0\r\n    last = 0\r\n    i = 0\r\n    while i < len(problem_statement):\r\n        if problem_statement[i] == '\\n':\r\n            last = i\r\n            while problem_statement[i] == '\\n':\r\n                i += 1\r\n            text += problem_statement[prev:last]\r\n            text += '<br>'\r\n            prev = i\r\n        i += 1\r\n\r\n    text += problem_statement[prev:len(problem_statement)]\r\n\r\n    sql_req = f\"\"\"\r\n    INSERT INTO problems\r\n    VALUES ({amount}, {problem_type}, {problem_class}, \"{problem_source}\", \"{text}\", \"{problem_answer}\", {problem_difficulty})\r\n    \"\"\"\r\n\r\n    print(sql_req)\r\n    sql_execute(sql_req) #|safe\r\n    connect.commit()\r\n\r\ndef insert_problem_file(problem_type, problem_class, problem_source, filename, problem_answer, problem_difficulty):\r\n    file = open(filename, \"r\", encoding=\"UTF-8\")\r\n    file_text = file.read()\r\n    insert_problem(problem_type, problem_source, problem_class, file_text, problem_answer, problem_difficulty)\r\n\r\ndef insert_user(info):\r\n    print(info)\r\n    current_id = int(sql_execute(\"\"\"\r\n            SELECT COUNT(*) FROM users\r\n            \"\"\").fetchall()[0][0])\r\n    does_exist = len(sql_execute(f\"\"\"SELECT * FROM users WHERE login = \"{info['login']}\" \"\"\").fetchall())\r\n\r\n    if does_exist:\r\n        return 1\r\n    else:\r\n        photo = request.files['file']\r\n        has_photo = not (request.files['file'].filename == '')\r\n        photo_id = -1\r\n        if has_photo:\r\n            photo_id = current_id\r\n            path = \"static/img/profile-pictures/profile_\" + str(photo_id) + \"_avatar.jpg\"\r\n            photo.save(path)\r\n\r\n        role_id = sql_execute(f\"\"\"SELECT role_id FROM roles WHERE role_name = '{info['role']}' \"\"\").fetchall()[0][0]\r\n        school_id = sql_execute(f\"\"\"SELECT school_id FROM schools WHERE school_name = '{info['school']}' \"\"\").fetchall()[0][0]\r\n        city_id = sql_execute(f\"\"\"SELECT city_id FROM cities WHERE city_name = '{info['city']}' \"\"\").fetchall()[0][0]\r\n        print(role_id, school_id, city_id)\r\n        registration_time = datetime.now().strftime(\"%y-%m-%d %H:%M:%S\")\r\n        sql_req = f\"\"\"\r\n                            INSERT INTO users \r\n                            VALUES ({current_id}, {role_id}, \"{registration_time}\", \"{info['first_name']}\", \"{info['second_name']}\", \"{info['third_name']}\", \"{info['login']}\", \r\n                            \"{info['password']}\", \"{info['email']}\", \"{info['url']}\", \"{info['tel']}\", {info['love_range']}, \r\n                            \"{info['birth_date']}\", {school_id}, {city_id}, \"{info['class']}\", {photo_id})\r\n                            \"\"\"\r\n        sql_execute(sql_req)\r\n        connect.commit()\r\n        return 0\r\n\r\ndef get_password_with_login(login):\r\n    sql_req = f\"\"\"\r\n    SELECT password FROM users\r\n    WHERE users.login = \"{login}\"\r\n    \"\"\"\r\n    return sql_execute(sql_req).fetchall()\r\n\r\ndef get_user_id_with_login(login):\r\n    sql_req = f\"\"\"\r\n    SELECT user_id FROM users\r\n    WHERE users.login = \"{login}\"\r\n    \"\"\"\r\n    return sql_execute(sql_req).fetchall()[0][0]\r\n\r\ndef get_user_info_with_user_id(id):\r\n    sql_req = f\"\"\"\r\n        SELECT * from users\r\n        WHERE user_id = \"{id}\"\r\n        \"\"\"\r\n    return sql_execute(sql_req).fetchall()\r\n\r\ndef variant_page_default_kwargs(variant_id):\r\n    sql_req = f\"\"\"SELECT * FROM\r\n                      problems INNER JOIN variant_problem\r\n                      ON variant_problem.problem_id = problems.problem_id\r\n                      WHERE variant_problem.variant_id = {variant_id}\"\"\"\r\n    problems = sql_execute(sql_req).fetchall()\r\n    answers_default = ((-1, -2)) * len(problems)\r\n    kwargs = dict()\r\n    kwargs['problems'] = problems\r\n    kwargs['answers'] = answers_default\r\n    kwargs['show_answers'] = False\r\n    kwargs['amount_right'] = -1\r\n    return kwargs\r\n\r\ndef variant_page_feedback_kwargs(variant_id):\r\n    sql_req = f\"\"\"SELECT * FROM\r\n                      problems INNER JOIN variant_problem\r\n                      ON variant_problem.problem_id = problems.problem_id\r\n                      WHERE variant_problem.variant_id = {variant_id}\"\"\"\r\n    problems = sql_execute(sql_req).fetchall()\r\n    kwargs = dict()\r\n    given_answers = []\r\n    tmp = request.form.to_dict()\r\n\r\n    if not (tmp.__contains__('show_answers')):\r\n        tmp['show_answers'] = False\r\n\r\n    for key in tmp:\r\n        given_answers.append(tmp[key])\r\n\r\n    answers = []\r\n    for i in range(len(problems)):\r\n        if given_answers[i] == '':\r\n            answers.append((-1, -1))\r\n        else:\r\n            answers.append((given_answers[i], int(given_answers[i] == sql_execute(f\"\"\"SELECT problem_answer FROM problems \r\n                WHERE problem_id = {problems[i][0]}\"\"\").fetchall()[0][0])))\r\n    answers = tuple(answers)\r\n    kwargs['problems'] = problems\r\n    kwargs['answers'] = answers\r\n    kwargs['show_answers'] = tmp['show_answers']\r\n    kwargs['amount_right'] = 0\r\n    for elem in answers:\r\n        if elem[1] == 1:\r\n            kwargs['amount_right'] += 1\r\n    return kwargs\r\n\r\ndef insert_variant_answers(answers, variant_id, user_id, assignment_id):\r\n    completion_time = datetime.now().strftime(\"%y-%m-%d %H:%M:%S\")\r\n    sql_req_1 = f\"\"\"\r\n    INSERT INTO user_variant\r\n    VALUES ({user_id}, {variant_id}, \"{completion_time}\", {assignment_id})\r\n    \"\"\"\r\n    problems = sql_execute(f\"\"\"SELECT problem_id FROM variant_problem WHERE variant_id = {variant_id}\"\"\").fetchall()\r\n    print(answers)\r\n    print(problems)\r\n    for problem in problems:\r\n        sql_req_2 = f\"\"\"\r\n            INSERT INTO user_problem \r\n            VALUES ({user_id}, {problem[0]}, \"{answers[str(problem[0])]}\", \"{completion_time}\", {variant_id}, {assignment_id},\r\n                    {(answers[str(problem[0])] == sql_execute(f\"\"\"SELECT problem_answer FROM problems \r\n                    WHERE problem_id = { problem[0] }\"\"\").fetchall()[0][0])})\r\n            \"\"\"\r\n        print(sql_req_2)\r\n        sql_execute(sql_req_2)\r\n\r\n    sql_execute(sql_req_1)\r\n    connect.commit()\r\n\r\ndef get_discussions():\r\n    sql_req = f\"\"\"\r\n        SELECT * FROM forum_discussions\r\n    \"\"\"\r\n    return sql_execute(sql_req).fetchall()\r\n\r\ndef get_topic_name(topic_id):\r\n    sql_req = f\"\"\"\r\n        SELECT discussion_name FROM forum_discussions WHERE discussion_id = { topic_id }\r\n    \"\"\"\r\n    return sql_execute(sql_req).fetchall()[0][0]\r\n\r\ndef get_topic_messages(topic_id):\r\n    sql_req = f\"\"\"\r\n        SELECT \r\n                users.first_name, \r\n                users.second_name, \r\n                forum_messages.message_text,\r\n                forum_messages.message_send_time\r\n            FROM \r\n                users \r\n            INNER JOIN \r\n                forum_messages ON users.user_id = forum_messages.message_author_id \r\n            INNER JOIN \r\n                forum_discussion_message ON forum_messages.message_id = forum_discussion_message.message_id \r\n            WHERE \r\n                forum_discussion_message.discussion_id = { topic_id }\r\n            ORDER BY \r\n                forum_messages.message_send_time ASC;\r\n    \"\"\"\r\n    return sql_execute(sql_req).fetchall()\r\n\r\ndef insert_new_topic(info):\r\n    message_id = sql_execute(\"SELECT count(*) FROM forum_messages\").fetchall()[0][0]\r\n    discussion_id = sql_execute(\"SELECT count(*) FROM forum_discussions\").fetchall()[0][0]\r\n    author_id = 0\r\n    messages_count = 1\r\n    message_name = info['topicTitle']\r\n    message_text = info['topicDescription']\r\n    message_send_time = datetime.now().strftime(\"%y-%m-%d %H:%M:%S\")\r\n    sql_req1 = f\"\"\"\r\n        INSERT INTO forum_discussions \r\n        VALUES ({discussion_id}, \"{message_name}\", {author_id}, {messages_count}, \"{message_send_time}\")\r\n    \"\"\"\r\n    sql_req2 = f\"\"\"\r\n        INSERT INTO forum_discussion_message\r\n        VALUES ({discussion_id}, {message_id})\r\n    \"\"\"\r\n    sql_req3 = f\"\"\"\r\n        INSERT INTO forum_messages\r\n        VALUES ({message_id}, \"{message_name}\", \"{message_text}\", \"{message_send_time}\", {author_id})\r\n    \"\"\"\r\n    sql_execute(sql_req1)\r\n    sql_execute(sql_req2)\r\n    sql_execute(sql_req3)\r\n    connect.commit()\r\n    return discussion_id\r\n\r\ndef insert_topic_message(topic_id, info):\r\n    message_text = info['reply_text']\r\n    message_id = sql_execute(\"SELECT count(*) FROM forum_messages\").fetchall()[0][0]\r\n    send_time = datetime.now().strftime(\"%y-%m-%d %H:%M:%S\")\r\n    author_id = 0\r\n    sql_req1 = f\"\"\"\r\n        INSERT INTO\r\n                forum_messages\r\n            VALUES\r\n                ({message_id}, NULL, \"{message_text}\", \"{send_time}\", {author_id}) \r\n    \"\"\"\r\n    sql_req2 = f\"\"\"\r\n        INSERT INTO\r\n                forum_discussion_message\r\n            VALUES\r\n                ({topic_id}, {message_id})\r\n    \"\"\"\r\n    cur_num = sql_execute(f\"\"\"SELECT messages_count FROM forum_discussions WHERE discussion_id = {topic_id}\"\"\").fetchall()[0][0]\r\n    sql_req3 = f\"\"\"\r\n        UPDATE\r\n            forum_discussions\r\n        SET\r\n            messages_count = {cur_num + 1}\r\n        WHERE\r\n            discussion_id = {topic_id}\r\n    \"\"\"\r\n    sql_execute(sql_req1)\r\n    sql_execute(sql_req2)\r\n    sql_execute(sql_req3)\r\n    connect.commit()\r\n\r\ndef get_learning_materials():\r\n    sql_req = f\"\"\"SELECT * FROM learning_materials\"\"\"\r\n    return sql_execute(sql_req).fetchall()\r\n\r\ndef get_learning_material(material_id):\r\n    sql_req = f\"\"\"SELECT * FROM learning_materials WHERE material_id = {material_id}\"\"\"\r\n    return sql_execute(sql_req).fetchall()\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"         ТИП   КЛАСС   ОТВЕТ   СЛОЖОСТЬ\", \"ВВЕДИТЕ: \", sep='\\n', end=\"\")\r\n    problem_type, problem_class, problem_answer, problem_difficulty = map(int, input().split())\r\n    insert_problem_file(problem_type, problem_class, \"costil.txt\", problem_answer, problem_difficulty)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/database_requests.py b/database_requests.py
--- a/database_requests.py	(revision 4324b50620e97d44a42cc731f8908f39bf6dff74)
+++ b/database_requests.py	(date 1738393822882)
@@ -187,8 +187,8 @@
         sql_req_2 = f"""
             INSERT INTO user_problem 
             VALUES ({user_id}, {problem[0]}, "{answers[str(problem[0])]}", "{completion_time}", {variant_id}, {assignment_id},
-                    {(answers[str(problem[0])] == sql_execute(f"""SELECT problem_answer FROM problems 
-                    WHERE problem_id = { problem[0] }""").fetchall()[0][0])})
+                    {(answers[str(problem[0])] == sql_execute(f'''SELECT problem_answer FROM problems 
+                    WHERE problem_id = { problem[0] }''').fetchall()[0][0])})
             """
         print(sql_req_2)
         sql_execute(sql_req_2)
